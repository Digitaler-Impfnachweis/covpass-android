package com.ibm.health.vaccination.sdk.android.crypto

import assertk.assertThat
import assertk.assertions.isEqualTo
import assertk.assertions.isSuccess
import org.junit.Ignore
import org.junit.Test

public class CertTest {
    private val sealCert = readPem(SEAL_CERT).first()
    private val caCert = readPem(D_TRUST_ROOT_TEST_CA_2_2_2019_CERT).first()
    private val rootCert = readPem(D_TRUST_ROOT_TEST_CA_2_2018_CERT).first()
    private val certs = readPem(PEM).toSet()
    private val validator = CertValidator(certs)

    @Test
    public fun `read multiple certs`() {
        assertThat(certs).isEqualTo(setOf(sealCert, caCert, rootCert))
    }

    @Test
    public fun `extract CA`() {
        assertThat(validator.rootCerts).isEqualTo(setOf(rootCert))
    }

    @Test
    public fun `extract anchors`() {
        assertThat(validator.trustAnchors.map { it.trustedCert }.toSet()).isEqualTo(setOf(rootCert))
    }

    @Ignore("Bouncy Castle fails to validate the rsassaPss signatures, but Conscrypt and OpenSSL succeed.")
    @Test
    public fun `validate cert`() {
        assertThat { validator.validate(sealCert) }.isSuccess()
    }
}

private val PEM by lazy {
    listOf(
        SEAL_CERT,
        D_TRUST_ROOT_TEST_CA_2_2_2019_CERT,
        D_TRUST_ROOT_TEST_CA_2_2018_CERT,
    ).joinToString("\n\n")
}

private const val SEAL_CERT = """
-----BEGIN CERTIFICATE-----
MIIGljCCBE6gAwIBAgIQZqMkG9X2Pufa9vyjq7qMbDA9BgkqhkiG9w0BAQowMKAN
MAsGCWCGSAFlAwQCA6EaMBgGCSqGSIb3DQEBCDALBglghkgBZQMEAgOiAwIBQDBg
MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMSEwHwYDVQQDExhE
LVRSVVNUIFRlc3QgQ0EgMi0yIDIwMTkxFzAVBgNVBGETDk5UUkRFLUhSQjc0MzQ2
MB4XDTIxMDQwODA5NTYxN1oXDTIyMDQxMTA5NTYxN1owgbUxCzAJBgNVBAYTAkRF
MRQwEgYDVQQKEwtVYmlyY2ggR21iSDEUMBIGA1UEAxMLVWJpcmNoIEdtYkgxDjAM
BgNVBAcMBUvDtmxuMQ4wDAYDVQQRDAU1MDY3MDEXMBUGA1UECRMOSW0gTWVkaWFw
YXJrIDUxHDAaBgNVBGETE0RUOkRFLVVHTk9UUFJPVklERUQxFTATBgNVBAUTDENT
TTAxNjk4NjE2MzEMMAoGA1UECBMDTlJXMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
QgAE9kvuF3/SPk2fUt5q8iuWLBvANNWfj/1SbFHaZZoW/ru/Kw7POshh/dqoJTh8
ML8BUFe+XnZAPO4Pf6QICD28FaOCAl8wggJbMB8GA1UdIwQYMBaAFFB2kqAa7IGu
kcLdqAlSaDfeUYRPMC0GCCsGAQUFBwEDBCEwHzAIBgYEAI5GAQEwEwYGBACORgEG
MAkGBwQAjkYBBgIwgf4GCCsGAQUFBwEBBIHxMIHuMCsGCCsGAQUFBzABhh9odHRw
Oi8vc3RhZ2luZy5vY3NwLmQtdHJ1c3QubmV0MEcGCCsGAQUFBzAChjtodHRwOi8v
d3d3LmQtdHJ1c3QubmV0L2NnaS1iaW4vRC1UUlVTVF9UZXN0X0NBXzItMl8yMDE5
LmNydDB2BggrBgEFBQcwAoZqbGRhcDovL2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9D
Tj1ELVRSVVNUJTIwVGVzdCUyMENBJTIwMi0yJTIwMjAxOSxPPUQtVHJ1c3QlMjBH
bWJILEM9REU/Y0FDZXJ0aWZpY2F0ZT9iYXNlPzAXBgNVHSAEEDAOMAwGCisGAQQB
pTQCAgIwgb8GA1UdHwSBtzCBtDCBsaCBrqCBq4ZwbGRhcDovL2RpcmVjdG9yeS5k
LXRydXN0Lm5ldC9DTj1ELVRSVVNUJTIwVGVzdCUyMENBJTIwMi0yJTIwMjAxOSxP
PUQtVHJ1c3QlMjBHbWJILEM9REU/Y2VydGlmaWNhdGVyZXZvY2F0aW9ubGlzdIY3
aHR0cDovL2NybC5kLXRydXN0Lm5ldC9jcmwvZC10cnVzdF90ZXN0X2NhXzItMl8y
MDE5LmNybDAdBgNVHQ4EFgQU0S/+AkQL75g0S/70mDcn1GxnimEwDgYDVR0PAQH/
BAQDAgbAMD0GCSqGSIb3DQEBCjAwoA0wCwYJYIZIAWUDBAIDoRowGAYJKoZIhvcN
AQEIMAsGCWCGSAFlAwQCA6IDAgFAA4ICAQBPi2lpcQ0UuuMoVQHBMVntjn0zSUji
hXAHrbPuIKKV2vgJG33bEWC/cHS7qirwH5wHNfvt8Qvd7U5vOAFtt2BumndVzryH
4tiXZ1iHs5D/f/0MTafF8M2AQb31BO6VD5orJtmquEDSEkb0Fql8ENewy3bmSqfX
RzXz5TMzA26jRDAbKkrvolfIJrHKsl1VUUKPLK2qdzfhkvq+ykRk5lV2BynVp9xJ
He2BU7vb8kvDbwT9V6379hKGpimuzdqhuMDO9qTvUtvX2/f/mdLHL7wCiCxGOz29
no9ViU6SOm9LyxuCd5VpPq0A1CmUDiu1+yqJ+9n96NHWC4Cx30R0jWzcCAdDvM8f
L96BXlntoNXtKvo852PrGz3rWqsXUPPnGWx2gu2JzVlmX0k2czzCrVvHlXJOvRTL
uGgtRsDYuyiGT6GRabODKiwq6N/ldgBZRhLX8OZaKx5AreoBuxvAKXdIRSof1uZk
OxjbQwj1Az2M6xnc/sqLK7Z+nkAvuL0HBSNfXqcDYcFFsgJNlZO10p9Uj5vAsmz6
BWzRtxoFrN0K/MItuzstamUYWGtnqoH63Lm7a07KtZXO1up+tsnC/zcP5y/AHHRk
GZdbrbYCZoQkMR7w5kaoWm854JBeqH6exb2IkH7hF/r0YpsT3LlfLWCBhfGPpp0y
jqRRGkQhboivkQ==
-----END CERTIFICATE-----
"""

private const val D_TRUST_ROOT_TEST_CA_2_2_2019_CERT = """
-----BEGIN CERTIFICATE-----
MIIIBzCCBb+gAwIBAgIQc55Lvm9bVwmjNqwFgc0RijA9BgkqhkiG9w0BAQowMKAN
MAsGCWCGSAFlAwQCA6EaMBgGCSqGSIb3DQEBCDALBglghkgBZQMEAgOiAwIBQDBj
MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMSQwIgYDVQQDExtE
LVRSVVNUIFJvb3QgVGVzdCBDQSAyIDIwMTgxFzAVBgNVBGETDk5UUkRFLUhSQjc0
MzQ2MB4XDTE5MDUwOTExMTIxOFoXDTMzMTAwNDA2MTU0MlowYDELMAkGA1UEBhMC
REUxFTATBgNVBAoTDEQtVHJ1c3QgR21iSDEhMB8GA1UEAxMYRC1UUlVTVCBUZXN0
IENBIDItMiAyMDE5MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjCCAiIwDQYJKoZI
hvcNAQEBBQADggIPADCCAgoCggIBANXhB5+drMwwX++ZMGFEsnlB0HjeuNIHH0pg
PhNCwDONoIZWWATPMW0SMVopGWyz8ajUQznOQ06Q/yVyqeJnKJwRjzSqQvcxAHMB
kGaZwu+r+ePnRcM46ShAotY2nei0rOmAbl1sySfMz9h0ccfNjDFX4V1bJ/bNcTX1
iBat2xxIy/HDsKXjpOvkADFgh9hfL4G6PAnfOzqwLnG5rLPVoXNmbMwU/GHkjOQL
72bQIs0nKP41lgXOB6MQPmOxluMyBfh+w1Rd5cbel7C9/h/ZSYlwsg4lSt6t6TBX
BwcmT0gOkVyz3mJBFZtpeLp2fB+kxOj4ZNrzMLJxoc/mG2MbLvRevANK1RZc8NrM
3zlCwhu7IPO6npV48IUEK61f7soTGiBlFcSb6kQJ456RF+YI3btUhe1V2ut1Uool
c+4nlNs4MCDK0BkRGYYxRvX3e4UJLtQ9gQ87k6geEe5dglNqhuXdwn+pKlZhvnEY
qlgZmbQPHi1xOjuYVdF6ZrEi5cm6Wog+cGoZSEBs8egyFU/zJN8lPpgqL4SyclPt
SV8TSDJ/hxCm8hHaAPS8a2yffphllaZ9i7J9r8+6MNFt6TGdl+UReH4RCS8H6xT8
IiA0bUhH0OCUcivsIibYRd5BK8D5oe51K3Tf5hx9MmYZZ4wBMYJnZvixnblINKxK
JTgibfA/AgMBAAGjggJYMIICVDAfBgNVHSMEGDAWgBShkUWQEYUjtdw3eFbx1VWW
JbcFWDCCAQYGCCsGAQUFBwEBBIH5MIH2MCsGCCsGAQUFBzABhh9odHRwOi8vc3Rh
Z2luZy5vY3NwLmQtdHJ1c3QubmV0MEoGCCsGAQUFBzAChj5odHRwOi8vd3d3LmQt
dHJ1c3QubmV0L2NnaS1iaW4vRC1UUlVTVF9Sb290X1Rlc3RfQ0FfMl8yMDE4LmNy
dDB7BggrBgEFBQcwAoZvbGRhcDovL2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1E
LVRSVVNUJTIwUm9vdCUyMFRlc3QlMjBDQSUyMDIlMjAyMDE4LE89RC1UcnVzdCUy
MEdtYkgsQz1ERT9jQUNlcnRpZmljYXRlP2Jhc2U/MBcGA1UdIAQQMA4wDAYKKwYB
BAGlNAICAjCBygYDVR0fBIHCMIG/MHugeaB3hnVsZGFwOi8vZGlyZWN0b3J5LmQt
dHJ1c3QubmV0L0NOPUQtVFJVU1QlMjBSb290JTIwVGVzdCUyMENBJTIwMiUyMDIw
MTgsTz1ELVRydXN0JTIwR21iSCxDPURFP2NlcnRpZmljYXRlcmV2b2NhdGlvbmxp
c3QwQKA+oDyGOmh0dHA6Ly9jcmwuZC10cnVzdC5uZXQvY3JsL2QtdHJ1c3Rfcm9v
dF90ZXN0X2NhXzJfMjAxOC5jcmwwHQYDVR0OBBYEFFB2kqAa7IGukcLdqAlSaDfe
UYRPMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgEAMD0GCSqGSIb3
DQEBCjAwoA0wCwYJYIZIAWUDBAIDoRowGAYJKoZIhvcNAQEIMAsGCWCGSAFlAwQC
A6IDAgFAA4ICAQCByOucGXcI5cDfSoigtixzqxe0UB4rCnNwBahzLqB7BMOFaRI7
WOgfUd4JAMhKur7RBFXrP/mOq6jq10QAHiamjQ3rcxCo5yy5b/omfmg//eqOd36G
CSLSUF2j9WBLsQVwbI4Ey6VuKFkT26hClAdeiOd5MmHKEAbT34f65J9vEt0Vc8bj
J77AG7QNva5ry7WkZviy8Lld9jptOKCOnRVGxFH7O68YQ0B5Llv4JyNaTfl8cpHW
Z2ToUhQcMXVRGm32FV0PX7RC89RFkRypsK+Uyrk+6mshPZzpGzvCj5QmCoLwxh0d
zpgDKaxr4M6wiLSyPO4jol1hsp0199V0m7gV+ZhVTtL+f/4bUNarjMK/v7ehM9ZY
Przz9+E+p5YxWRBqA7MP/PvXtUKdgL+sd/q0kfIknAl3GMhx9BLY6Ovm2k5zPUyr
TiQ8vxBdCShqsk+myGQ+JG2tQT1dv5V2ksE43HpeWPjcQtWEXGXmVrwVb6oYMbnC
ZToLeuLv6QlKiurhfjQiEUNK7wcBY3wB7NudN3x7hC58sCNj45dTZnI4q1YriZx/
H6t+3+snfscRvG6WVMFkFru8q2+92J7VfLU4XUnH/f2GOqJFS3i3rM0M1GBRO06X
CjCmyjcYhZEUkViknHJOSKeS1Cu4AGbTuUVZR9zSGIwJ5kEe98f7x+kz0w==
-----END CERTIFICATE-----
"""

private const val D_TRUST_ROOT_TEST_CA_2_2018_CERT = """
-----BEGIN CERTIFICATE-----
MIIGYzCCBEugAwIBAgIQDJRDkSobKQ4ulFltOi5tbzANBgkqhkiG9w0BAQ0FADBj
MQswCQYDVQQGEwJERTEVMBMGA1UEChMMRC1UcnVzdCBHbWJIMSQwIgYDVQQDExtE
LVRSVVNUIFJvb3QgVGVzdCBDQSAyIDIwMTgxFzAVBgNVBGETDk5UUkRFLUhSQjc0
MzQ2MB4XDTE4MTAwNDA2MTU0MloXDTMzMTAwNDA2MTU0MlowYzELMAkGA1UEBhMC
REUxFTATBgNVBAoTDEQtVHJ1c3QgR21iSDEkMCIGA1UEAxMbRC1UUlVTVCBSb290
IFRlc3QgQ0EgMiAyMDE4MRcwFQYDVQRhEw5OVFJERS1IUkI3NDM0NjCCAiIwDQYJ
KoZIhvcNAQEBBQADggIPADCCAgoCggIBAKDaggv3K6RIKHmKvlt9IfRLosXD2yih
qnwrNtB6/0DHjrbBlNKoTAxyKEXO1/TheUtl6c/TDkN/ldX7xh5pHOLNWpTrDZf/
Oj3nYMOh1T4TRwwxoL/rz+IIyJU//5yAviaD8ZCYWvGbVcIsba9Q1iedn5aHHglh
jPRWpfGXE6RfgSHQFNlty0vthWgIj6DmR7oFG+If/UmmGCypH8zUCdZ6oQa22OPF
mNXCOa5LeMuptt49frfIKFjwsZGknRLDbk56ucOPTk6oApkH3D8ej8CjnF/oPEgv
VNBcYZ89lJDwX3X0KIZnmitpuN74gzxW8+OLTuCE3MT2DAQac08xZvZ6/tfh4kHW
yKi77OJw59f9vFggAUQA0epttIFbhn1hQw098fYgD54Uui/TLKhPiJE/us60GQCX
7tosZPJKdRCzthGUBF1aemgj0Mwg551nrlxpGSD+t4fvuDXYU/s6vGq6U7KQNFr/
hmPYjN/KiuBtsJVlkMkZzZWt0JGxix/87yhZgc6pQgIOFvERO7+U/VI6UFaK6lGC
rfT/5g3pFKUchqggIQ8NKVFvdlcq0LZJVnjyAr0gPdOxkhQjccqmpBF1VBnOl290
eAGIx6GNoyAiAXyXvQDB2kD5DlJpJ+vaiAeD/+/aw2GSvlXmuuTT4a6NQe3WXG23
p8GvtvZddXkFAgMBAAGjggERMIIBDTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
BBShkUWQEYUjtdw3eFbx1VWWJbcFWDAOBgNVHQ8BAf8EBAMCAQYwgcoGA1UdHwSB
wjCBvzB7oHmgd4Z1bGRhcDovL2RpcmVjdG9yeS5kLXRydXN0Lm5ldC9DTj1ELVRS
VVNUJTIwUm9vdCUyMFRlc3QlMjBDQSUyMDIlMjAyMDE4LE89RC1UcnVzdCUyMEdt
YkgsQz1ERT9jZXJ0aWZpY2F0ZXJldm9jYXRpb25saXN0MECgPqA8hjpodHRwOi8v
Y3JsLmQtdHJ1c3QubmV0L2NybC9kLXRydXN0X3Jvb3RfdGVzdF9jYV8yXzIwMTgu
Y3JsMA0GCSqGSIb3DQEBDQUAA4ICAQBjRVgDd+ewBi/ghVNuTL+lj7UT3hd9ATep
vkc5bpEX/IGSVB7pm7GwtTgIqmyrnlkKUFhLgnSYJnADRY7CnhgvgBcS9NBwfpAC
3dAq65EwOqwOLWQgCU14F27fgEr0Q8SB9d7np7JPzrN3IYYd9q2AINpsmgROQsiJ
2j6mIf/1LcygSw9f8e28EPE/U7qWGeI7cGpGws4Yxzd+KM7SXZUz8D+ZXYJHcOfY
OAdWK3YgRxtrgqCMIohzPk9XG7u9oHkyksajeP6yvH8YctcRXb76DS/yV/edUngp
MqGA6cqMCEJ1wuIqIpDLKJoUHO3z9k6o47fUJQFGFNsQQD+Y+n3avxFoAXzkfkkx
Fy60wdGsl3gVuCDNfrrguKktaPYjWawioH/ovPcM5/2W/B+74PZTAtko8i9GMMXh
D3BHalMbQCE6OMhf06RsxCBa0qsQDDTJz+tlx49TrEVWgJRk4uPLKOs2sBhpKkPK
UIwDu1PDOrxOh070qlt/rM+MzpQ8d4YfdTLAmANeE6Q4lIXe6XU6mvD7vFylOyYJ
bu3G3Khk+ZYQCPmxV/guUwbDCTdP0//MC4JV6MUaKwGo+iYeoiNITUcp+Wh5rnvr
asIzJ4XZkp0sCAW7bI4wvmy3IIh4Ntg7NcwklN9xbxjjx0R54ddkmnRw67ho3xsa
3x/UtC2Myw==
-----END CERTIFICATE-----
"""
